{"version":3,"file":"static/webpack/static\\development\\pages\\[siteId]\\[configId]\\[pageId]\\[taskId].js.949be64e9d4714448ecb.hot-update.js","sources":["webpack:///./components/ResultBoard.tsx"],"sourcesContent":["\r\nimport { Grid, List, ListItem, ListItemText, Typography, createStyles, Theme, WithStyles, withStyles, FormGroup, FormControlLabel, Switch } from '@material-ui/core';\r\nimport React from 'react';\r\nimport { Page, Config } from './models';\r\nimport StatusChips from './StatusChips';\r\nimport { BASE_URL } from './constants';\r\n\r\nconst styles = (theme: Theme) => createStyles({\r\n    pagesList: {\r\n        maxHeight: `calc(100vh - ${theme.spacing(24)}px)`,\r\n        overflow: 'auto'\r\n    },\r\n    pageContent: {\r\n        paddingLeft: theme.spacing(4),\r\n        paddingTop: theme.spacing(2)\r\n    }\r\n});\r\n\r\nconst sortPage = (p1: Page, p2: Page) => {\r\n    return p1.url < p2.url ? -1 : 1;\r\n};\r\n\r\nexport interface ResultBoardProps extends WithStyles<typeof styles> {\r\n    config: Config;\r\n    currentPageId?: string;\r\n}\r\n\r\nexport const ResultBoard = withStyles(styles)((props: React.PropsWithChildren<ResultBoardProps>) => {\r\n    const { classes, children, currentPageId, config } = props;\r\n\r\n    const { tasks, pages, site, _id: configId } = config;\r\n\r\n    const currentItemRef = React.useRef<HTMLAnchorElement>();\r\n    const listContainerRef = React.useRef<HTMLUListElement>();\r\n    const [showError, setShowError] = React.useState<boolean>(false);\r\n    const [showWarning, setShowWarning] = React.useState<boolean>(false);\r\n    const [showNotice, setShowNotice] = React.useState<boolean>(false);\r\n    const [filteredPages, setFilteredPages] = React.useState<Page[]>(pages);\r\n\r\n    const completedTasks = tasks.filter((t) => t.completedDate);\r\n    const lastCompletedTask = completedTasks.sort((t1, t2) => t2.completedDate - t1.completedDate)[0];\r\n    const currentTaskId = lastCompletedTask._id;\r\n\r\n    React.useEffect(() => {\r\n        if (!currentItemRef.current || !listContainerRef.current) return;\r\n        setTimeout(() => listContainerRef.current.scrollTo({top: currentItemRef.current.offsetTop, behavior: 'smooth'}), 750);\r\n    }, [currentItemRef, listContainerRef, showError, showWarning, showNotice]);\r\n\r\n    React.useEffect(() => {\r\n        setFilteredPages(pages\r\n            .filter(cp => (!showError || cp.errorCount) && (!showWarning || cp.warningCount) && (!showNotice || cp.noticeCount))\r\n            .sort(sortPage)\r\n        );\r\n    }, [showError, showWarning, showNotice]);\r\n\r\n\r\n    return (\r\n        <Grid container>\r\n            <Grid item lg={3}>\r\n            </Grid>\r\n            <Grid item lg={9}>\r\n            </Grid>\r\n            <Grid item lg={3}>\r\n                <FormGroup row style={{justifyContent: 'center'}}>\r\n                    <FormControlLabel\r\n                        control={<Switch checked={showError} onChange={(ev) => setShowError(ev.target.checked)} name=\"ErrorPages\" color=\"primary\" />}\r\n                        label=\"Errors\"\r\n                    />\r\n                    <FormControlLabel\r\n                        control={<Switch checked={showWarning} onChange={(ev) => setShowWarning(ev.target.checked)} name=\"WarningPages\" color=\"primary\" />}\r\n                        label=\"Warnings\"\r\n                    />\r\n                    <FormControlLabel\r\n                        control={<Switch checked={showNotice} onChange={(ev) => setShowNotice(ev.target.checked)} name=\"NoticePages\" color=\"primary\" />}\r\n                        label=\"Notices\"\r\n                    />\r\n                </FormGroup>\r\n                <Typography variant=\"body2\" align=\"center\" gutterBottom>\r\n                    <em>{filteredPages.length} pages</em>\r\n                </Typography>\r\n                <List className={classes.pagesList}  ref={listContainerRef}>\r\n                    {filteredPages\r\n                        .map((cp) => {\r\n                        return (\r\n                            <ListItem key={cp._id} \r\n                                component=\"a\" button\r\n                                href={`${BASE_URL}/${site._id}/${configId}/${cp._id}/${currentTaskId}`}\r\n                                selected={cp._id == currentPageId}\r\n                                ref={cp._id == currentPageId ? currentItemRef : null}\r\n                                >\r\n                                <ListItemText primary={\r\n                                    <React.Fragment>\r\n                                        <Typography variant=\"body1\" color={cp.title ? \"textPrimary\" : \"error\"}>\r\n                                            {cp.title || <em>Untitled Page</em>}\r\n                                        </Typography>\r\n                                    </React.Fragment>\r\n                                } secondary={\r\n                                    <React.Fragment>\r\n                                        <Typography variant=\"body2\" gutterBottom component=\"div\">\r\n                                            {cp.url}\r\n                                        </Typography>\r\n                                        <StatusChips variant=\"body2\" errorCount={cp.errorCount} warningCount={cp.warningCount} noticeCount={cp.noticeCount} />\r\n                                    </React.Fragment>\r\n                                } disableTypography />\r\n                            </ListItem>\r\n                        );\r\n                    })}\r\n                </List>\r\n            </Grid>\r\n            <Grid item lg={9} className={classes.pageContent}>\r\n                {children}\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n});\r\n\r\nexport default ResultBoard;"],"mappings":";;;;;;;;;;;;;;;;;;;;;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AALA;AAAA;AACA;AAUA;AACA;AACA;AACA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAWA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAGA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAEA;;;;A","sourceRoot":""}